import torch
import torch.nn as nn
import numpy as np
from transformers import RobertaModel, RobertaConfig, RobertaTokenizer

class RobertaTextClassifier(nn.Module):
    def __init__(self, num_labels=2, dropout_prob=0.2):
        super(RobertaTextClassifier, self).__init__()

        # RoBERTa 모델 및 설정 불러오기
        config = RobertaConfig.from_pretrained('roberta-base')
        self.roberta = RobertaModel.from_pretrained('roberta-base', config=config)

        # 은닉층의 크기는 config에서 가져옵니다.
        self.hidden_size = config.hidden_size

        # 라벨의 개수
        self.num_labels = num_labels

        # 활성화 함수 변경 (예: ReLU)
        self.activation = nn.ReLU()

        # 첫 번째 선형 레이어: 입력 크기는 hidden_size, 출력 크기는 hidden_size로 설정
        self.linear1 = nn.Linear(in_features=self.hidden_size, out_features=self.hidden_size)

        # 두 번째 선형 레이어: 입력 크기는 hidden_size, 출력 크기는 num_labels로 설정
        self.linear2 = nn.Linear(in_features=self.hidden_size, out_features=self.num_labels)

        # 드롭아웃 레이어 추가
        self.dropout1 = nn.Dropout(dropout_prob)
        self.dropout2 = nn.Dropout(dropout_prob)

    def forward(self, input_ids, attention_mask):
        # RoBERTa 모델의 출력 받기
        outputs = self.roberta(input_ids=input_ids, attention_mask=attention_mask)

        # Pooler 출력에서 [CLS] 토큰에 해당하는 벡터 추출
        cls_vector = outputs.pooler_output

        # 첫 번째 선형 레이어 및 드롭아웃 적용
        cls_vector = self.linear1(cls_vector)
        cls_vector = self.activation(cls_vector)
        cls_vector = self.dropout1(cls_vector)

        # 두 번째 선형 레이어 및 드롭아웃 적용
        cls_vector = self.linear2(cls_vector)
        cls_vector = self.dropout2(cls_vector)

        return cls_vector

    
def load_pretrained_roberta_weights(model, model_path):
    # 미리 학습된 ALBERT 모델 로드
    pretrained_model = torch.load(model_path, map_location=torch.device('cpu'))

    # ALBERT 모델의 가중치를 현재 모델로 복사
    model.load_state_dict(pretrained_model['model_state_dict'])
    
def test_model(model_path, keyword_list):
        
    # 모델 로드
    loaded_model = RobertaTextClassifier(num_labels=2)
    load_pretrained_roberta_weights(loaded_model, model_path)

    # 토크나이저 로드
    tokenizer = RobertaTokenizer.from_pretrained('roberta-base')

    # 입력 데이터 토큰화
    input_text = ' '.join(keyword_list)
    encoded_text = tokenizer(input_text, return_tensors='pt', truncation=True, padding=True)

    # 모델 예측
    with torch.no_grad():
        outputs = loaded_model(encoded_text['input_ids'], attention_mask=encoded_text['attention_mask'])

    # 확률로 변환
    probabilities = torch.nn.functional.softmax(outputs, dim=1).cpu().numpy()

    # 더 높은 확률의 클래스를 결정
    predicted_label = np.argmax(probabilities)
    # 결과 출력 (확률을 퍼센트로 변환)
    ham_prob_percentage = probabilities[0][0] * 100
    smishing_prob_percentage = probabilities[0][1] * 100

    # 결과 출력
    result = 'ham' if predicted_label == 0 else 'smishing'
    print(f"입력 데이터: {input_text}")
    print(f"모델 예측 확률 (ham, smishing): {ham_prob_percentage:.2f}% , {smishing_prob_percentage:.2f}%")
    print(f"모델 예측 결과: {result}")

    result_object = AnalysisResult(input_text, ham_prob_percentage, smishing_prob_percentage, result)

    return result_object


if __name__ == '__main__':    

    model_path = "C:/Users/L/.spyder-py3/project/output/model_epoch_final_model.pt"
    
    a = ['spring', '내뱉다', '미니', '잠정', '그녀', '이유', '여주', '고소하다', '주', '서울', '안산', '알다', '충청남도', '한가인', '줄', '드디어', '전체', '뽐내다', '파주', '낙하산', '시사', '방탄소년단', '휘성', '딸', '김지원', '안성', '일인', '안']
    b = ['spring', '하이브', '뉴진스', '구리', '앨범', '광명', '가족', '인천', '덥다', '씨', '김정화', '보이', '몰리다', '이전', '솔직', '이천', '더', '양평', '평택', '민희진', '역선택', '고백', '받다', '심각하다', '없다', '사망']
    c = ['spring','논란', '하남', '가평', '말', '경호원', '조수빈', '②', '마시다', '신뢰', '유은성', '젓다', '화성', '예비신랑', '초', 'mm', '교체', '의정부', 'MC', '제공', '김혜윤', '스포츠', '시발', '결혼', '입양', '소속사', '세라', '편지', '김포', '차트', '충청북도']
    d = ['spring','의붓아들', '고양', '동두천', '급상승', '이용', '뒤', '포천', '아일릿', '물', '문산', '프로포폴', '반응', '사실', '두', '행위', '예쁘다', '각선미', '최강희', '제주도', '부천', '전라북도', '지적', '엄기준', '지민', '최', '과천', '광주', '펫숍', '멤버', '여성', '장악', '얼굴', '뉴스', '주장', '손', '실시간', '공항', '군포', '빌보드', '카피', 'TOP', '무혐의', '진입', '점', '이렇게', '성남', '연예', '연천', '널', '연예인', '출산', '낮', '인사', '부모', '후', '솔로', '피해자', '설정', '남양주', '①', '사태', 'A', '전문', '그날', '내', '케이웨더', '팝', '방시혁', '내겐', '역사', '생기다', '발표', '방치', '자주', '첫', '손주', '보기', '美', '자료', '용인', '유정', '전문가', '폐지', '사연', '강화', '양주', '의왕', 's', 'K', '관심', '죽이다', '오산', '노', '오열', '사내아이', '인성', '심다', '어도', '단독', '사다', '건강하다', '시흥', '명예훼손', '보이다', '배우', '비', '없애다', '팬', '학폭', '안양', '수원', '서남서']
    e = ['spring', '내뱉다', '미니', '잠정', '그녀', '이유', '여주', '고소하다', '주', '서울', '안산', '알다', '충청남도', '한가인', '줄', '드디어', '전체', '뽐내다', '파주', '낙하산', '시사', '방탄소년단', '휘성', '딸', '김지원', '안성', '일인', '안', '♥', '하이브', '뉴진스', '구리', '랭킹', '앨범', '광명', '가족', '인천', '덥다', '씨', '김정화', '보이', '몰리다', '이전', '솔직', 'm', '이천', '침해', '더', '양평', '평택', '민희진', '역선택', '고백', '받다', '심각하다', '맑음', '없다', '→', '사망', '논란', '하남', '가평', '말', '경호원', '조수빈', '②', '마시다', '신뢰', '유은성', '젓다', '화성', '예비신랑', '초', 'mm', '교체', '의정부', 'MC', '제공', '김혜윤', '스포츠', '시발', '결혼', '입양', '소속사', '세라', '편지', '김포', '차트', '충청북도', '의붓아들', '고양', '동두천', '급상승', '이용', '뒤', '포천', '아일릿', '물', '문산', '프로포폴', '반응', '사실', '두', '행위', '예쁘다', '각선미', '최강희', '제주도', '부천', '전라북도', '지적', '엄기준', '지민', '최', '과천', '광주', '펫숍', '멤버', '여성', '장악', '얼굴', '뉴스', '주장', '손', '실시간', '공항', '군포', '빌보드', '카피', 'TOP', '무혐의', '진입', '점', '이렇게', '성남', '연예', '연천', '널', '연예인', '출산', '낮', '인사', '부모', '후', '솔로', '피해자', '설정', '남양주', '①', '사태', 'A', '전문', '그날', '내', '케이웨더', '팝', '방시혁', '내겐', '역사', '생기다', '발표', '방치', '자주', '첫', '손주', '보기', '美', '자료', '용인', '유정', '전문가', '폐지', '사연', '강화', '양주', '의왕', 's', 'K', '관심', '죽이다', '오산', '노', '오열', '사내아이', '인성', '심다', '어도', '단독', '사다', '건강하다', '시흥', '명예훼손', '보이다', '배우', '비', '없애다', '팬', '학폭', '안양', '수원', '서남서']
    
    general_keywords = ["사람", "시간", "일", "때", "그냥", "말", "것", "생각", "일어나다", "일어나다", "이렇게",
                    "저렇게", "그렇게", "곳", "많다", "적다", "어떻다", "모르다", "알다", "하다", "되다",
                    "가다", "오다", "있다", "없다", "보다", "듣다", "많이", "조금", "자주", "가끔", "어제",
                    "오늘", "내일", "이번주", "다음주"]
   

    general_word_list = ['spring', '내뱉다', '미니', '잠정', '그녀', '이유', '여주', '고소하다', '주', '서울', '안산', '알다', '충청남도', '한가인', '줄', '드디어', '전체', '뽐내다', '파주', '낙하산', '시사', '방탄소년단', '휘성', '딸', '김지원', '안성', '일인', '안', '♥', '하이브', '뉴진스', '구리', '랭킹', '앨범', '광명', '가족', '인천', '덥다', '씨', '김정화', '보이', '몰리다', '이전', '솔직', 'm', '이천', '침해', '더', '양평', '평택', '민희진', '역선택', '고백', '받다', '심각하다', '맑음', '없다', '→', '사망', '논란', '하남', '가평', '말', '경호원', '조수빈', '②', '마시다', '신뢰', '유은성', '젓다', '화성', '예비신랑', '초', 'mm', '교체', '의정부', 'MC', '제공', '김혜윤', '스포츠', '시발', '결혼', '입양', '소속사', '세라', '편지', '김포', '차트', '충청북도', '의붓아들', '고양', '동두천', '급상승', '이용', '뒤', '포천', '아일릿', '물', '문산', '프로포폴', '반응', '사실', '두', '행위', '예쁘다', '각선미', '최강희', '제주도', '부천', '전라북도', '지적', '엄기준', '지민', '최', '과천', '광주', '펫숍', '멤버', '여성', '장악', '얼굴', '뉴스', '주장', '손', '실시간', '공항', '군포', '빌보드', '카피', 'TOP', '무혐의', '진입', '점', '이렇게', '성남', '연예']
    k=['spring', '사람', '기석', '분', '그렇다', '말', '끝', '찾다', '문인', '위', '올려주다', '청구', '밖', '수', '해주다', '역', '이혼', '달라', '홀로', '참석', '후', '나타내다', '관리원', '분야', '미용', '지다', '표정', '삼키다', '지난', '걸치다', '배움', '민희', '며', '처음', '체육', '생계', '준', '아버지', '시작', '그것', '나르다', '걱정', '불안감', '지급', '상황', '약속', '집행권', '바꾸다', '만에', '연속', '짜다', '경험', '요청', '눈물', '로서', '씨', '호소', '업', '학급', '보여주다', '미안하다', '번', '변호사', '결연하다', '호명', '주장', '걸음', '찾아오다', '”', '열', '법정', '재판', '다니다', '부', '임명장', '상대방', '가정법원', '싶다', '유', '앞', '쓰다', '날', '역할', '초조하다', '애쓰다', '남편', '학원', '서초구', '보다', '결심', '기적', '긴장', '음악', '서울', '나오다', '모습', '“', '아들', '살', '허다', '지인', '때문', '안', '어렵다', '소송', '다독이다', '마주', '맡다', '지원', '종사', '크게', '내다', '소속', '부모', '돈', '챙기다', '위로', '기색', '부족하다', '짧다', '글썽', 'A', '재능', '나선', '끝나다', '자다', '없다', '어가', '이행', '소개', '청구인', '마음', '받다', '판결', '반장', '사정', '양육비', '들어가다', '이름', '이유', '전', '크다', '턱', '증액', '욕심', '주지', '들어서다', '커지다', '생각', '점', '실망하다', '비용', '경제', '불과하다', '올리다', '비정', '씩', '일종', '만나다', '오후', '많다', '좋다', '아니다', '여러']
    k1=['spring', '달라', '재판', '업', '참석', '문인', '표정', '시작', '청구', '소속', '나선', '임명장', '사정', '아버지', '여러', '짧다', '생각', '마주', '법정', '비용', '이행', '위로', '부족하다', '많다', '종사', '주지', '가정법원', '욕심', '실망하다', '그렇다', '돈', '분', '밖', '위', '소송', '재능', '서초구', '학급', '모습', '끝', '이혼', '날', '이름', '“', '미안하다', '지인', '미용', '”', '없다', '안', '생계', '청구인', '배움', '눈물', '결심', '어가', '상대방', '양육비', '민희', '유', '주장', '아니다', '호명', '점', '결연하다', '분야', '학원', '말', '씩', '며', '불과하다', '번', '불안감', '사람', '긴장', '남편', '걸음', '만에', '열', '로서', '경험', '호소', '요청', '앞', '좋다', '어렵다', '아들', '기적', '역할', '관리원', '집행권', '전', '부', '상황', '처음', '약속', '지급', '초조하다', '음악', '걱정', '증액', '비정', '경제', '글썽', '체육', '준', '수', '살', '그것', '소개', '오후', '판결', '변호사', '씨', '지난', 'A', '서울', '역', '기색', '연속', '일종', '후', '지원', '이유', '턱', '기석', '부모', '반장', '마음', '홀로', '때문', '크게']
    k2 =['spring', '달라', '재판', '업', '참석', '문인', '표정', '시작', '청구', '소속', '나선', '허다', '임명장', '사정', '아버지', '내다', '여러', '들어가다', '생각', '마주', '법정', '비용', '이행', '위로', '찾아오다', '종사', '주지', '가정법원', '욕심', '들어서다', '돈', '분', '밖', '위', '소송', '재능', '자다', '서초구', '학급', '보다', '모습', '걸치다', '다니다', '끝', '챙기다', '삼키다', '이혼', '날', '이름', '보여주다', '바꾸다', '지다', '지인', '미용', '안', '생계', '청구인', '배움', '눈물', '결심', '어가', '상대방', '양육비', '민희', '애쓰다', '유', '주장', '호명', '점', '분야', '학원', '말', '며', '번', '불안감', '사람', '긴장', '남편', '걸음', '올리다', '열', '싶다', '나타내다', '로서', '경험', '호소', '요청', '앞', '나르다', '아들', '기적', '받다', '역할', '관리원', '집행권', '올려주다', '전', '부', '찾다', '상황', '처음', '약속', '지급', '음악', '걱정', '증액', '비정', '해주다', '경제', '글썽', '체육', '준', '수', '살', '맡다', '그것', '소개', '크다', '오후', '쓰다', '판결', '만나다', '변호사', '씨', '지난', '커지다', '짜다', '서울', '역', '기색', '연속', '일종', '후', '지원', '이유', '나오다', '턱', '기석', '부모', '반장', '마음', '다독이다', '홀로', '때문', '크게', '끝나다']
    k3 = ['winter', '야당', '무지하다', '평생', '걷다', '야권', '낙동강', '오전', '무능하다', '여사', '비판', '그렇다', '출마', '만난', '차리다', '지역구', '진', '취재', '보다', '사상', '날', '변', '대통령', '부산', '배재정', '승리', '오늘', '김정숙', '못', '격려', '입다', '이재영', '후보', '말', '시민', '거두다', '갑', '성적', '정부', '경남', '걸다', '윤석열', 'SBS', '좋다', '새롭다', '시절', '양산', '강하다', '세력', '전', '찾다', '강조', '처음', '이렇게', '문재인', '물금읍', '점퍼', '돼다', '필요성', '해주다', '당선', '기운', '벚꽃', '오후', '만나다', '혁신', '조국', '바라다', '무도', '길', '미래', '국회의원', '정신', '민주당', '전해지다', '문', '파란색', '내']
    test_model(model_path, a)
    test_model(model_path, k)
    test_model(model_path, k1)
    test_model(model_path, k2)
    test_model(model_path, k3)
    test_model(model_path, c)
    test_model(model_path, d)
    test_model(model_path, e)
    test_model(model_path, general_word_list)
    
    
    keyword_list = ["spring", "비상", "긴급", "즉시", "신속", "급한", "즉각",
                     "당첨", "추첨", "상금", "무료", "특별 이벤트",
                     "해킹", "보안", "계정", "비밀번호", "변경",
                     "확인", "인증", "업데이트", "갱신", "확인 필요",
                     "공지", "공식", "긴급 조치", "중요", "고객센터",
                     "혜택", "특가", "할인", "이벤트", "무료 증정",
                     "마감", "기한", "오늘까지", "한정", "마지막 기회",
                     "당신의", "회원", "고객", "고객님", "님"]
    finance_smishing_keywords = ['fall', "투자", "환급", "보험", "자동이체", "소액결제", "거래", "무료", "특별", "당첨",
                             "무료체험", "무료제공", "이벤트", "당첨", "상품권", "미포함", "청구", "승인", "신용",
                                 "사람", "시간", "일", "때", "그냥", "말", "것", "생각", "일어나다", "일어나다", "이렇게",
                    "저렇게", "그렇게", "곳", "많다", "적다", "어떻다", "모르다", "알다", "하다", "되다",
                    "가다", "오다", "있다", "없다", "보다", "듣다", "많이", "조금", "자주", "가끔", "어제",
                    "오늘", "내일", "이번주", "다음주"]
    test_list = ['spring','애플', '쿠폰', '아이폰', '무', '광고', '할부', '기념', '거부']
    
    testing = ['winter','보안', '확인', '비정상', '카드', '계좌', '링크', '귀하', '상품권', '오늘', '감지', '계정', '혜택', '할인', '클릭', '이벤트', '위해', '참여', '상당', '은행', '해킹', '고객', '로그인', '보호']
    
    weather = ['summer','위험', '날씨', '안개', '도', '오늘', '지금', '도로', '내륙', '낮', '한낮', '염두', '대기', '전', '서울', '오후', '더', '경기', '매우', '지수', '시작', '차차', '불로', '속', '볕', '맑은', '밤', '정보', '자외선', '건조', '한편', '가능성', '신경', '완연', '주의', '경북', '제외', '동쪽', '비', '두시', '봄', '지역', '부처님오신날', '확대', '대체로', '크게', '기온', '번질', '오전', '전세영', '전국', '출발', '아침', '중부', '기상캐스터', '교차', '강릉', '날', '하늘', '치기', '대구', '일부', '가량', '불씨', '소식', '중인', '북부', '불어', '발효', '안팎', '내일', '수도권', '바람', '수요일', '강원', '뜻', '특보', '동해안', '옷차림', '충청권', '밖']
    test_model(model_path, keyword_list)
    test_model(model_path, test_list)
    test_model(model_path, finance_smishing_keywords)
    test_model(model_path, testing)
    test_model(model_path, weather)